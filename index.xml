<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JIeJaitt‘s Blog</title>
    <link>https://jiejaitt.pages.dev/</link>
    <description>Recent content on JIeJaitt‘s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Dec 2022 20:19:39 +0800</lastBuildDate><atom:link href="https://jiejaitt.pages.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>First ｜hugo原理理解</title>
      <link>https://jiejaitt.pages.dev/post/first.html</link>
      <pubDate>Sun, 18 Dec 2022 23:08:25 +0800</pubDate>
      
      <guid>https://jiejaitt.pages.dev/post/first.html</guid>
      <description>Hello Hugo erblog.pages.dev https://www.elliot98.top/ https://dash.cloudflare.com/7c63601e43e79bf455b76fde5d8e4251 class Solution { public: double angleClock(int hour, int minutes) { double res; double res_hour = hour*30+minutes/2.0; double res_min = minutes * 6; res = max(res_hour,res_min) - min(res_hour,res_min); res = min(res,360-res); return res; } }; baseURL = &amp;#39;http://example.org/&amp;#39; title = &amp;#39;JIeJaitt‘s Blog&amp;#39; theme = &amp;#39;erblog&amp;#39; paginate = 3 languageCode = &amp;#39;en-us&amp;#39; DefaultContentLanguage = &amp;#34;en&amp;#34; footnoteReturnLinkContents = &amp;#34;^&amp;#34; uglyurls = true [permalinks] posts = &amp;#34;:slug&amp;#34; [blackfriday] extensionsmask = [&amp;#34;noIntraEmphasis&amp;#34;] fractions = false [markup.</description>
    </item>
    
    <item>
      <title>Git如何帮助我们阅读开源项目以及我们如何参与开源项目</title>
      <link>https://jiejaitt.pages.dev/post/git%E5%A6%82%E4%BD%95%E5%B8%AE%E5%8A%A9%E6%88%91%E4%BB%AC%E9%98%85%E8%AF%BB%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%BB%A5%E5%8F%8A%E6%88%91%E4%BB%AC%E5%A6%82%E4%BD%95%E5%8F%82%E4%B8%8E%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE.html</link>
      <pubDate>Fri, 23 Dec 2022 20:19:39 +0800</pubDate>
      
      <guid>https://jiejaitt.pages.dev/post/git%E5%A6%82%E4%BD%95%E5%B8%AE%E5%8A%A9%E6%88%91%E4%BB%AC%E9%98%85%E8%AF%BB%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%BB%A5%E5%8F%8A%E6%88%91%E4%BB%AC%E5%A6%82%E4%BD%95%E5%8F%82%E4%B8%8E%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE.html</guid>
      <description>阅读开源代码小技巧——Git历史记录快速翻页式签出 通过阅读源码来学习开源项目是最直接也最有效的方法。而想要了解一个开源项目，最好是从第一个 commit 开始看起，特别是第一个最小可用版本发布前的 commits, 通过阅读对每一次 commit 提交源码，能够最直接的理解作者的设计思路和开发过程中的思考。
在 GitHub 的 repository 页面上可以很方便的看到所有历史记录及其演进。不过，使用 IDE 或有跳转功能的编辑器来阅读会更方便。这就需要我们将代码仓 Clone 到本地。
Clone 下来的开源 Git 仓，想要签出第一次 commit 也简单：通过 git log --reverse 倒序展示 log,排在第一个的即是第一次 commit, 拷贝 commit sha 值，然后 git checkout commit_sha 便可以签出该commit的代码。
当我们想继续跟着作者的节奏看接来下开发的内容，便需要再次 show log, 并找出下一次的 commit sha 值，如果 commit 记录很多，找起来就不那么容易了。因此我在看 git 代码历史的时候想，能不能将 git commits 历史记录当成像网站页面一样可以分页查看呢，通过简单的上翻下翻命令来 checkout 到各 commit 节点的代码。
其实也不难，无非是用管道将上面提到的命令串起来，写成 shell 可执行文件放到 git 安装的 bin 目录即可。签出第一次 Commit 节点代码的 shell 脚本如下：（通过 git log --reverse --pretty=%H 可以将 log 记录倒序并只显示sha值，然后通过 args 获取管道输出 checkout.</description>
    </item>
    
    <item>
      <title>八股文的一些理解</title>
      <link>https://jiejaitt.pages.dev/post/%E5%85%AB%E8%82%A1%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3.html</link>
      <pubDate>Fri, 23 Dec 2022 19:51:31 +0800</pubDate>
      
      <guid>https://jiejaitt.pages.dev/post/%E5%85%AB%E8%82%A1%E6%96%87%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3.html</guid>
      <description>面试宝典现在叫八股文。说实话挺反感面试应届面这东西的。这些根本不算知识最多算知道。 你无法要求所有人都看过JDK源码， 能够明白工作原理或者快速设计一个类似的的时间就行了。 真正需要考核的是候选人是解决问题的能力， 知识面的广度以及特定场景技术选型的思路。
这种八股文最多算一个门槛， 考察的是你至少肯花时间背了或者了解了。稍微有点经验的面试官就会根据你的回答深挖下去， 例如HashMap 候选人提到了红黑树， 那么就会顺着问红黑树左旋、右旋、变色相关的问题， 在询问红黑树和平衡二叉树的区别， 特定业务场景的选型。
所以无论什么知识最重要的是结合业务，拥抱变化！
总之题目是根据候选人的回答动态变化的， 靠这种死记硬背只能证明你花时间准备了。
简单的八股文背背就完事了。重要的是一定要和具体开发经验以及应用场景结合，一定要注意。例如问arraylist扩充，他会问你为什么要这么设计，问线程池参数的话，一定会继续问你实际开发中如何设置参数的，为什么要这么设置。后面的死锁，他可能会追问你项目中有没有遇到死锁，如何解决。</description>
    </item>
    
    <item>
      <title>纯Python实现CNN识别手写体数字&#43;GUI展示 MNIST数据集</title>
      <link>https://jiejaitt.pages.dev/post/%E7%BA%AFpython%E5%AE%9E%E7%8E%B0cnn%E8%AF%86%E5%88%AB%E6%89%8B%E5%86%99%E4%BD%93%E6%95%B0%E5%AD%97&#43;gui%E5%B1%95%E7%A4%BA-mnist%E6%95%B0%E6%8D%AE%E9%9B%86.html</link>
      <pubDate>Wed, 21 Dec 2022 14:41:33 +0800</pubDate>
      
      <guid>https://jiejaitt.pages.dev/post/%E7%BA%AFpython%E5%AE%9E%E7%8E%B0cnn%E8%AF%86%E5%88%AB%E6%89%8B%E5%86%99%E4%BD%93%E6%95%B0%E5%AD%97&#43;gui%E5%B1%95%E7%A4%BA-mnist%E6%95%B0%E6%8D%AE%E9%9B%86.html</guid>
      <description>开发环境：Python3 + Numpy + PyQt5 在项目中，mnist_cnn_gui_main.py是主程序，运行这个文件即可执行整个项目。
手写数字识别研究的难点在于:
第一,不同数字之间字形相差不大,使得准确区分某些数字相当困难; 第二,数字虽然只有十种,而且笔划简单,但同一数字写法千差万别。使得手写数字识别的识别率和识别精度很低。 本设计主要分为三大步骤:
第一阶段,预处理; 第二阶段,特征提取; 第三阶段,分类器设计及识别。 第一阶段预处理阶段主要包括定位、二值化、去噪、切分、大小规格化、 细化等步骤,这里将采用一些成熟的算法。 第二阶段手写数字特征的提取结构化特征时主要根据图像像素的走向 ,准确判断出某段数字或字母的结构,如直线、折线、曲线、分叉线等。同时配合中线 特征等建立起较为准确的特征库。 第三阶段分类器设计及识别时将采用 BP神经网络算法设计分类器,通过。 这些算法本身的高容错率和算法本身的模糊判断等特性,再结合之前建立起的准确的特征库,从而提高手写数字识别时的正确率,达到理想的识别效果。
数据集的来源： MNIST 数据集来自美国国家标准与技术研究所, National Institute of Standards and Technology (NIST). 训练集 (training set) 由来自 250 个不同人手写的数字构成, 其中 50% 是高中学生, 50% 来自人口普查局 (the Census Bureau) 的工作人员. 测试集(test set) 也是同样比例的手写数字数据。数据集下载网址：http://yann.lecun.com/exdb/mnist/
算法原理 k-近邻（kNN, k-NearestNeighbor）算法是一种基本分类与回归方法，通俗点来说，就是给定一个训练数据集，对新的输入实例，在训练数据集中找到与该实例最邻近的 k 个实例，这 k 个实例的多数属于某个类，就把该输入实例分为这个类。 python 第三方库scikit-learn(sklearn)提供了knn的分类器。
手写数字识别是KNN算法一个特别经典的实例，其数据源获取方式有两种，一种是来自MNIST数据集，另一种是从UCI欧文大学机器学习存储库中下载，本文基于后者讲解该例。 基本思想就是利用KNN算法推断出如下图一个32x32的二进制矩阵代表的数字是处于0-9之间哪一个数字。
MNIST手写数字数据库（Mixed National Institute of Standards and Technology database）包含70000张手写数字图片。这些数字是通过美国国家统计局的员工和美国高校的学生收集的。每张图片都是28x28的灰度图。
用mnist数据集训练出一个knn分类器，对新输入的手写数字进行识别。
源码解析 数据的预处理：为了分析我们的数据并从中提取见解，有必要在开始建立机器学习模型之前对数据进行处理，即我们需要以模型可以理解的形式转换数据。由于机器无法理解图像，音频等形式的数据。在本次实验中，我们使用了官网上已经分析好的数据集，不需要重新进行数据预处理即可进行试验。但是，还是需要包装一些调用数据集的函数。</description>
    </item>
    
    <item>
      <title>simpread-TCP和Udp的区别是什么？</title>
      <link>https://jiejaitt.pages.dev/post/simpread-tcp%E5%92%8Cudp%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88.html</link>
      <pubDate>Sun, 18 Dec 2022 23:08:25 +0832</pubDate>
      
      <guid>https://jiejaitt.pages.dev/post/simpread-tcp%E5%92%8Cudp%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88.html</guid>
      <description>一张图看懂TCP与UDP的区别，秒懂！
哈哈，上面的图，大家看个乐就好，接下来，我从 7 个方面说说 TCP 和 UDP 区别。
1. 连接
TCP 是面向连接的传输层协议，传输数据前先要建立连接。 UDP 是不需要连接，即刻传输数据。 2. 服务对象
TCP 是一对一的两点服务，即一条连接只有两个端点。 UDP 支持一对一、一对多、多对多的交互通信 3. 可靠性
TCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按需到达。 UDP 是尽最大努力交付，不保证可靠交付数据。 4. 拥塞控制、流量控制
TCP 有拥塞控制和流量控制机制，保证数据传输的安全性。 UDP 则没有，即使网络非常拥堵了，也不会影响 UDP 的发送速率。 5. 首部开销
TCP 首部长度较长，会有一定的开销，首部在没有使用「选项」字段时是 20 个字节，如果使用了「选项」字段则会变长的。 UDP 首部只有 8 个字节，并且是固定不变的，开销较小。 6. 传输方式
TCP 是流式传输，没有边界，但保证顺序和可靠。 UDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。 7. 分片不同
TCP 的数据大小如果大于 MSS 大小，则会在传输层进行分片，目标主机收到后，也同样在传输层组装 TCP 数据包，如果中途丢失了一个分片，只需要传输丢失的这个分片。 UDP 的数据大小如果大于 MTU 大小，则会在 IP 层进行分片，目标主机收到后，在 IP 层组装完数据，接着再传给传输层。 TCP 和 UDP 应用场景：</description>
    </item>
    
    <item>
      <title>如何介绍项目及应对项目细节追问</title>
      <link>https://jiejaitt.pages.dev/post/%E5%A6%82%E4%BD%95%E4%BB%8B%E7%BB%8D%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%BA%94%E5%AF%B9%E9%A1%B9%E7%9B%AE%E7%BB%86%E8%8A%82%E8%BF%BD%E9%97%AE.html</link>
      <pubDate>Sat, 17 Dec 2022 23:08:25 +0800</pubDate>
      
      <guid>https://jiejaitt.pages.dev/post/%E5%A6%82%E4%BD%95%E4%BB%8B%E7%BB%8D%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%BA%94%E5%AF%B9%E9%A1%B9%E7%9B%AE%E7%BB%86%E8%8A%82%E8%BF%BD%E9%97%AE.html</guid>
      <description>一个标准的面试流程中，肯定会在一面二面中问到你具体做过的项目，然后追问项目的细节。
一个标准的面试流程中，肯定会在一面二面中问到你具体做过的项目，然后追问项目的细节。这类问题往往会通过下面形式来提问：
发现你简历的一个项目，直接让你介绍下这个项目 让你回忆下你做过的项目中，最值得分享（最大型 / 最困难 / 最能体现技术能力 / 最难忘）的 如果让你设计 xx 系统 / 项目，你会怎么着手干 这类跟项目相关的综合性问题，既能体现候选人的技术水平、业务水平和架构能力，也能够辨别候选人是不是真的做过项目，还能够发现候选人的一些软技能。
下面分享下，遇见这类问题应该怎样回答。
怎样介绍自己做过的一个项目 按照第 1 小节说的，简历当中的项目，你要精挑细选，既要体现技术难度，又要想好细节。具体要介绍一个项目（包括梳理一个项目），可以按照下面几个阶段来做。
1. 介绍项目背景 这个项目为什么做，当初大的环境背景是什么？还是为了解决一个什么问题而设立的项目？背景是很重要的，如果不了解背景，一上来就听一个结论性的项目，面试官可能对于项目的技术选型、技术难度会有理解偏差，甚至怀疑是否真的有过这样的项目。
比如一上来就说：我们的项目采用了「backbone」来做框架，然后。。。而「backbone」已经是三四年前比较新鲜的技术，现在会有更好的选择方案，如果不介绍项目的时间背景，面试官肯定一脸懵逼。
2. 承担角色 项目涉及的人员角色有哪些，自己在其中扮演的角色是什么？
这里候选往往人会自己给自己挖坑，比如把自己在项目中起到的作用夸大等。一般来说，面试官细节追问的时候，如果候选人能够把细节或者技术方案等讲明白、讲清楚，不管他是真的做过还是跟别人做过，或者自己认真思考过，都能体现候选人的技术水平和技术视野。前提还是在你能够兜得住的可控范围之内做适当的「美化」。
3. 最终的结果和收益 项目介绍过程中，应该介绍项目最终的结果和收益，比如项目最后经过多久的开发上线了，上线后的数据是怎样的，是否达到预期，还是带来了新的问题，遇见了问题自己后续又是怎样补救的。
4. 有始有终：项目总结和反思 有总结和反思，才会有进步。 项目做完了往往会有一些心得和体会，这时候应该跟面试官说出来。在梳理项目的总结和反思时，可以按照下面的列表来梳理：
收获有哪些？ 是否有做得不足的地方，怎么改进？ 是否具有可迁移性？ 比如，之前详细介绍了某个项目，这个项目当时看来没有什么问题，但是现在有更好的解决方案了，候选人就应该在这里提出来：现在看来，这个项目还有 xx 的问题，我可以通过 xx 的方式来解决。
再比如：做这个项目的时候，你做得比较出彩的地方，可以迁移到其他项目中直接使用，小到代码片段，大到解决方案，总会有你值得总结和梳理的地方。
介绍完项目总结这部分，也可以引导面试官往自己擅长的领域思考。比如上面提到项目中的问题，可以往你擅长的方面引导，即使面试官没有问到，你也介绍到了。
按照上面的四段体介绍项目，会让面试官感觉候选人有清晰的思路，对整个项目也有理解和想法，还能够总结反思项目的收益和问题，可谓「一箭三雕」。
没有做过大型项目怎么办 对于刚刚找工作的应届生，或者面试官让你进行一个大型项目的设计，候选人可能没有类似的经验。这时候不要用「我不会、没做过」一句话就带过。
如果是实在没有项目可以说，那么可以提自己日常做的练手项目，或者看到一个解决方案的文章 / 书，提到的某个项目，抒发下自己的想法。
如果是对于面试官提出来需要你设计的项目 / 系统，可以按照下面几步思考：
有没有遇见过类似的项目 有没有读过类似解决方案的文章 项目能不能拆解，拆解过程中能不能发现自己做过的项目可以用 项目解决的问题是什么，这类问题有没有更好的解决方案 总之，切记不要一句「不知道、没做过」就放弃，每一次提问都是自己表现的机会。
项目细节和技术点的追问 介绍项目的过程中，面试官可能会追问技术细节，所以我们在准备面试的时候，应该尽量把技术细节梳理清楚，技术细节包括：
技术选型方案：当时做技术选型所面临的状况 技术解决方案：最终确定某种技术方案的原因，比如：选择用 Vue 而没有用 React 是为什么？ 项目数据和收益 项目中最难的地方 遇见的坑：如使用某种框架遇见哪些坑 一般来说，做技术选型的时候需要考虑下面几个因素：</description>
    </item>
    
    <item>
      <title>Happy Birthday to BM</title>
      <link>https://jiejaitt.pages.dev/zone/3.html</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jiejaitt.pages.dev/zone/3.html</guid>
      <description>A scholarship A letter from my email says that I have got a scholarship.</description>
    </item>
    
    <item>
      <title>Happy Birthday to BM</title>
      <link>https://jiejaitt.pages.dev/zone/1.html</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jiejaitt.pages.dev/zone/1.html</guid>
      <description>Happy Birthday to BM! Happy Birthday to you, Be happy and healthy!</description>
    </item>
    
    <item>
      <title>I got my first salary</title>
      <link>https://jiejaitt.pages.dev/zone/2.html</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jiejaitt.pages.dev/zone/2.html</guid>
      <description>I got my first salary In this semester, I am a TA for C Language Programming. Today I got my first salary in my life. I felt proud of myself.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://jiejaitt.pages.dev/about.html</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jiejaitt.pages.dev/about.html</guid>
      <description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
https://github.com/russross/blackfriday https://github.</description>
    </item>
    
  </channel>
</rss>
